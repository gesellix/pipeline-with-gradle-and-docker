import de.hypoport.example.ConsumerVersionResolver
import de.hypoport.example.ProducerVersionResolver

buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.9'
  }
}

apply plugin: 'groovy'
apply plugin: 'com.github.ben-manes.versions'


// This module relies on the necessary artifacts to be published in mavenLocal or externally available,
// i.e. you'll probably need to perform the following task in the "example-project":
// `./gradlew build install publishToMavenLocal`
// Some dependencies have been prepared in the GitHub repository.
repositories {
  mavenLocal()
  maven {
    url "https://raw.githubusercontent.com/gesellix/pipeline-with-gradle-and-docker/mvnrepo/"
  }
  mavenCentral()
  jcenter()
}

group = 'org.hypoport.example'


ext {
  projectVersion = ""

  producerVersionResolver = new ProducerVersionResolver(project)
  consumerVersionResolver = new ConsumerVersionResolver(project)

  buildTriggers = ["consumer", "producer"]
  applyBuildConfiguration = { String triggeredBy ->
    if (!buildTriggers.contains(triggeredBy)) {
      throw new IllegalStateException("expected the property 'triggeredBy' to be one of ${buildTriggers}.")
    }
    logger.lifecycle "triggered by ${triggeredBy}..."
    apply from: file("build-triggered-by-${triggeredBy}.gradle")
  }
}

apply from: file('build-setup-producer.gradle')

// TODO Kann weg, wenn wir die Tests nicht mehr "manuell" ausführen
apply from: file('build-setup-consumer.gradle')
tasks.withType(Test).each { task ->
  task.dependsOn runProducerContainer
  task.finalizedBy cleanup
}

// TODO Kann weg, wenn wir die Tests nicht mehr "manuell" ausführen
tasks.addRule("Perform Contract-Tests: performContracttestsTriggeredBy<Consumer|Producer>") { String taskName ->
  if (taskName.startsWith("performContracttestsTriggeredBy")) {
    def triggeredBy = taskName.substring("performContracttestsTriggeredBy".length()).toLowerCase()
    applyBuildConfiguration(triggeredBy)

    task(taskName) {
      dependsOn performContracttests
    }
  }
}

tasks.addRule("Prepare Contract-Tests: prepareContracttestsTriggeredBy<Consumer|Producer>") { String taskName ->
  if (taskName.startsWith("prepareContracttestsTriggeredBy")) {
    def triggeredBy = taskName.substring("prepareContracttestsTriggeredBy".length()).toLowerCase()
    applyBuildConfiguration(triggeredBy)

    task(taskName) {
      dependsOn runProducerContainer

      doLast {
        def producerPropertiesFile = file('producer.properties')
        if (project.hasProperty('producerPropertiesFile') && project['producerPropertiesFile']) {
          producerPropertiesFile = new File(project['producerPropertiesFile'] as String)
        }
        else {
          logger.warn "property 'producerPropertiesFile' has not been set, using '${producerPropertiesFile}' as fallback."
        }
        logger.lifecycle "writing producerUrl to '${producerPropertiesFile}'"
        producerPropertiesFile.withPrintWriter { PrintWriter w ->
          w.append("producerUrl=${producerBaseUrl}/example\n")
        }
        logger.lifecycle "contractTests can now be performed against '${producerBaseUrl}'"
      }
    }
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.3'
  distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}
