import de.gesellix.gradle.docker.tasks.DockerBuildTask
import de.gesellix.gradle.docker.tasks.DockerPushTask
import de.gesellix.gradle.docker.tasks.DockerRmiTask
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
    classpath "de.gesellix:gradle-docker-plugin:2015-05-06T06-17-42"
  }
}

apply plugin: 'spring-boot'
apply plugin: 'de.gesellix.docker'
apply plugin: 'com.github.ben-manes.versions'

dependencies {
  compile("org.springframework.boot:spring-boot-starter-web:$springBootVersion")
  compile("org.springframework.boot:spring-boot-starter-actuator:$springBootVersion")
  compile("org.springframework:spring-beans:$springVersion")
  compile("org.springframework:spring-context:$springVersion")
  compile("org.springframework:spring-web:$springVersion")
  compile("org.springframework:spring-webmvc:$springVersion")

  compile("org.springframework.security:spring-security-core:$springSecurityVersion")
  compile("org.springframework.security:spring-security-config:$springSecurityVersion")
  compile("org.springframework.security:spring-security-web:$springSecurityVersion")

  compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:$jacksonVersion"
  compile 'ch.qos.logback:logback-access:1.1.3'

  compile('org.ektorp:org.ektorp:1.4.2')

  compile("javax.mail:mail:1.4.7")

  compile 'io.prometheus:client:0.0.8'
//  compile 'io.prometheus.client.utility:jvmstat:0.0.8'
  compile 'io.prometheus.client.utility:hotspot:0.0.8'
  compile 'com.matttproud.accepts:accepts:0.0.2'
  compile 'args4j:args4j:2.0.16'

  compile project(':common')
}

processResources {
  filter ReplaceTokens, tokens: ['example.version': artifactVersion]
}

test {
  systemProperties = System.properties
}

// notwendig, wenn 'publish' ohne vorheriges 'build' aufgerufen wird
tasks.publish.dependsOn bootRepackage

docker {
  dockerHost = System.env.DOCKER_HOST ?: "tcp://127.0.0.1:2375"
}

ext {
  dockerBuildContextSources = file("${projectDir}/src/main/docker")
  dockerBuildContextDir = file("${buildDir}/docker")
  dockerBackendServiceImageName = 'hypoport/example-backend'
}

task prepareBuildContext(type: Copy) {
  from dockerBuildContextSources
  into dockerBuildContextDir
}

task copyArtifact(type: Copy) {
  dependsOn bootRepackage
  dependsOn prepareBuildContext
  from jar.archivePath
  into dockerBuildContextDir
  rename { 'backend.jar' }
}

task buildImage(type: DockerBuildTask) {
  dependsOn copyArtifact
  imageName = "${dockerBackendServiceImageName}:${artifactVersion}"
  buildContextDirectory = dockerBuildContextDir
}

task rmiLocalImage(type: DockerRmiTask) {
  imageId = "${dockerBackendServiceImageName}:${artifactVersion}"
}

task pushImage(type: DockerPushTask) {
  dependsOn buildImage
  repositoryName = "${dockerBackendServiceImageName}:${artifactVersion}"
  authConfigPlain = getDockerClient().readDefaultAuthConfig()
  finalizedBy rmiLocalImage
}
tasks.publish.finalizedBy pushImage
