def contracttestsDirectory = "${buildDir}/contracttests"

ext {
  projectVersion = ""
}

group = 'org.hypoport.example'

buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.9'
  }
}

apply plugin: 'groovy'
apply plugin: 'com.github.ben-manes.versions'

// this module relies on the necessary artifacts to be published in mavenLocal or externally available
repositories {
  mavenLocal()
  maven {
    url "https://raw.githubusercontent.com/gesellix/pipeline-with-gradle-and-docker/mvnrepo/"
  }
  mavenCentral()
  jcenter()
}

configurations {
  contracttests
}

def setupProjectVersionFromLocal() {
  def projectVersionFile = new File('project-version.txt')
  if (projectVersionFile.exists()) {
    projectVersion = projectVersionFile.text.trim()
    logger.warn "Using project version from file '${projectVersionFile.name}': $projectVersion"
  }
  else {
    logger.error "could not read project version from file '${projectVersionFile.name}'"
  }
}

def setupProjectVersionFromProd() {
//  projectVersion = artifactVersionService.retrieveDeployedProjectProdCurrentVersion()
  projectVersion = 'unspecified'
  logger.warn "Latest project-contracttests version: $projectVersion"
}

def addDependencies() {
  def artifact = "org.hypoport.example:contracttests:${projectVersion}"
  def contracttestDep = dependencies.create(artifact) {
    transitive = false
  }
  dependencies.add 'testRuntime', dependencies.create(artifact)
  dependencies.add 'contracttests', contracttestDep
}

gradle.taskGraph.whenReady { taskGraph ->
  if (taskGraph.hasTask(performContracttestsTriggeredByConsumer)) {
    setupProjectVersionFromLocal()
  }
  else if (taskGraph.hasTask(performContracttestsTriggeredByProducer)) {
    setupProjectVersionFromProd()
  }
  addDependencies()
}

task unzipContracttests << {
  copy {
    from {
      zipTree(configurations.contracttests.singleFile)
    }
    into {
      contracttestsDirectory
    }
  }
}

task contracttests(type: Test) {
  dependsOn unzipContracttests
  testClassesDir file(contracttestsDirectory)

  reports.html.destination = file("$reports.html.destination/contracttests")
  reports.junitXml.destination = file("$reports.junitXml.destination/contracttests")
}

task aggregateTestReports(type: TestReport) {
  destinationDir = test.reports.html.destination
  reportOn contracttests
}

check.dependsOn aggregateTestReports

task performContracttestsTriggeredByConsumer(dependsOn: contracttests) {
  doLast {
    logger.warn "contract tests triggered by consumer finished."
  }
}

task performContracttestsTriggeredByProducer(dependsOn: contracttests) {
  doLast {
    logger.warn "contract tests triggered by producer finished"
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.3'
  distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}
